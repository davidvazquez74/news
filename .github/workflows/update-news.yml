name: Update latest.json (news)

on:
  workflow_dispatch:           # puedes lanzarlo a mano desde Actions
  schedule:
    - cron: '0 * * * *'        # cada hora (UTC)

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Asegura deps y modo ESM
      - name: Ensure deps
        run: |
          if [ ! -f package.json ]; then
            echo '{"name":"news","private":true,"type":"module","dependencies":{"rss-parser":"^3.13.0"}}' > package.json
          else
            node -e "const fs=require('fs');const p=JSON.parse(fs.readFileSync('package.json')); if(p.type!=='module'){p.type='module'; fs.writeFileSync('package.json', JSON.stringify(p,null,2));}"
            npm pkg set dependencies.rss-parser='^3.13.0'
          fi
          npm i --no-audit --no-fund

      - name: Build latest.json
        env:
          NODE_OPTIONS: "--max-old-space-size=512"
        run: |
          test -f scripts/build_latest.js || (echo "scripts/build_latest.js not found" && exit 1)
          node scripts/build_latest.js
          test -f data/latest.json || (echo "data/latest.json not created" && exit 1)

      # Normaliza claves/estructura con Node (sin jq)
      - name: Normalize latest.json keys (Node)
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const p = 'data/latest.json';
          if (!fs.existsSync(p)) { console.error('latest.json missing'); process.exit(1); }
          let raw = fs.readFileSync(p,'utf8');
          let j;
          try { j = JSON.parse(raw); } catch(e){ console.error('JSON parse error:', e.message); process.exit(1); }

          // Asegurar que trabajamos con objeto
          if (j === null || typeof j !== 'object' || Array.isArray(j)) {
            console.error('Root is not an object'); process.exit(1);
          }

          // Normaliza claves en minúscula para lookup
          const lowerObj = {};
          for (const [k,v] of Object.entries(j)) lowerObj[String(k).toLowerCase()] = v;

          const toArr = (x) => Array.isArray(x) ? x.filter(Boolean) : [];
          const pick = (...names) => {
            for (const n of names) {
              const v = lowerObj[n];
              if (Array.isArray(v)) return v;
            }
            return [];
          };

          const out = {
            updated_at: typeof j.updated_at === 'string' ? j.updated_at : new Date().toISOString(),
            cataluna:   toArr(pick('cataluna','cataluña','catalunya')),
            espana:     toArr(pick('espana','españa','spain')),
            rioja:      toArr(pick('rioja','la rioja')),
            background: toArr(pick('background','global','mundo'))
          };

          fs.writeFileSync(p, JSON.stringify(out,null,2), 'utf8');
          const totals = {
            cataluna: out.cataluna.length,
            espana: out.espana.length,
            rioja: out.rioja.length,
            background: out.background.length
          };
          console.log('Normalized keys OK. Totals:', totals);
          NODE

      # Valida estructura y contenido mínimo antes de commitear
      - name: Validate latest.json (size & shape)
        run: |
          SIZE=$(wc -c < data/latest.json || echo 0)
          echo "latest.json size: $SIZE bytes"
          node - <<'NODE'
          const fs = require('fs');
          const j = JSON.parse(fs.readFileSync('data/latest.json','utf8'));
          const keys = ['cataluna','espana','rioja','background'];
          if (!j.updated_at || !keys.every(k => Array.isArray(j[k]))) {
            console.error('Invalid structure'); process.exit(1);
          }
          const total = keys.reduce((a,k)=>a+(j[k]?.length||0),0);
          console.log('total items:', total);
          if (total < 4) { console.error('Too few items (<4). Abort.'); process.exit(2); }
          NODE

      - name: Commit & push changes (only if file changed)
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add data/latest.json || true
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore(news): auto-update latest.json"
            git push
          fi
