name: Update latest.json (news)

on:
  workflow_dispatch:           # puedes lanzarlo manualmente desde Actions
  schedule:
    - cron: '0 * * * *'        # cada hora en punto (UTC)

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Asegura deps y modo ESM
      - name: Ensure deps
        run: |
          if [ ! -f package.json ]; then
            echo '{"name":"news","private":true,"type":"module","dependencies":{"rss-parser":"^3.13.0"}}' > package.json
          else
            node -e "const fs=require('fs');const p=JSON.parse(fs.readFileSync('package.json')); if(p.type!=='module'){p.type='module'; fs.writeFileSync('package.json', JSON.stringify(p,null,2));}"
            npm pkg set dependencies.rss-parser='^3.13.0'
          fi
          npm i --no-audit --no-fund

      # Calcular versi칩n de build
      - name: Compute build version
        run: echo "BUILD_VERSION=v$(date -u +%Y.%m.%d).${GITHUB_RUN_NUMBER}+${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Build latest.json
        env:
          NODE_OPTIONS: "--max-old-space-size=512"
          BUILD_VERSION: ${{ env.BUILD_VERSION }}
          GIT_SHA: ${{ github.sha }}
        run: |
          test -f scripts/build_latest.js || (echo "scripts/build_latest.js not found" && exit 1)
          node scripts/build_latest.js
          test -f data/latest.json || (echo "data/latest.json not created" && exit 1)
          test -f data/meta.json || (echo "data/meta.json not created" && exit 1)

      # Inspecciona y normaliza el JSON
      - name: Inspect & normalize latest.json (Node)
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const p = 'data/latest.json';
          if (!fs.existsSync(p)) { console.error('latest.json missing'); process.exit(1); }
          const raw = fs.readFileSync(p,'utf8');
          console.log('--- latest.json HEAD ---');
          console.log(raw.slice(0, 600));
          console.log('--- END HEAD ---');

          let j;
          try { j = JSON.parse(raw); }
          catch(e){
            console.error('JSON parse error:', e.message);
            process.exit(1);
          }

          if (j === null || typeof j !== 'object') {
            console.error('Root is not an object. typeof:', typeof j);
            process.exit(1);
          }

          if (Array.isArray(j)) {
            console.warn('Root is an array. Bucketing by "section"...');
            const buckets = { cataluna:[], espana:[], rioja:[], background:[] };
            for (const it of j) {
              const sec = (it?.section || '').toLowerCase();
              if (sec.includes('catal')) buckets.cataluna.push(it);
              else if (sec.includes('espa')) buckets.espana.push(it);
              else if (sec.includes('rioja')) buckets.rioja.push(it);
              else buckets.background.push(it);
            }
            j = { updated_at: new Date().toISOString(), ...buckets };
          }

          const lowerObj = {};
          for (const [k,v] of Object.entries(j)) lowerObj[String(k).toLowerCase()] = v;

          const toArr = (x) => Array.isArray(x) ? x.filter(Boolean) : [];
          const pick = (...names) => {
            for (const n of names) {
              const v = lowerObj[n];
              if (Array.isArray(v)) return v;
            }
            return [];
          };

          const out = {
            updated_at: typeof j.updated_at === 'string' ? j.updated_at : new Date().toISOString(),
            version: typeof j.version === 'string' ? j.version : process.env.BUILD_VERSION || '',
            commit: typeof j.commit === 'string' ? j.commit : process.env.GIT_SHA || '',
            cataluna:   toArr(pick('cataluna','catalu침a','catalunya')),
            espana:     toArr(pick('espana','espa침a','spain')),
            rioja:      toArr(pick('rioja','la rioja')),
            background: toArr(pick('background','global','mundo'))
          };

          fs.writeFileSync(p, JSON.stringify(out,null,2), 'utf8');
          console.log('Normalized keys OK. Totals:', {
            cataluna: out.cataluna.length,
            espana: out.espana.length,
            rioja: out.rioja.length,
            background: out.background.length
          });
          NODE

      # Validaci칩n estricta
      - name: Validate latest.json (size & shape)
        run: |
          SIZE=$(wc -c < data/latest.json || echo 0)
          echo "latest.json size: $SIZE bytes"
          node - <<'NODE'
          const fs = require('fs');
          const j = JSON.parse(fs.readFileSync('data/latest.json','utf8'));
          const keys = ['cataluna','espana','rioja','background'];
          if (!j.updated_at || !keys.every(k => Array.isArray(j[k]))) {
            console.error('Invalid structure'); process.exit(1);
          }
          const total = keys.reduce((a,k)=>a+(j[k]?.length||0),0);
          console.log('total items:', total);
          if (total < 4) { console.error('Too few items (<4). Abort.'); process.exit(2); }
          NODE

      - name: Commit & push changes (only if file changed)
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add data/latest.json data/meta.json || true
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore(news): auto-update latest.json ($BUILD_VERSION)"
            git push
          fi

      - name: Upload latest.json for debugging (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: latest-json-debug
          path: data/latest.json
